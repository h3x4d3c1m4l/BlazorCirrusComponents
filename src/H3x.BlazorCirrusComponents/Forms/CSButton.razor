@inherits CirrusComponentBase

@BuildButton()

@code {
    [Parameter]
    public bool HasContainerWrapper { get; set; }

    [Parameter]
    public bool IsOutline { get; set; }

    [Parameter]
    public bool IsDisabled { get;set; }

    [Parameter]
    public CSSize Size { get; set; }

    [Parameter]
    public CSButtonShapes Shape { get; set; }

    [Parameter]
    public CSButtonElementTypes ElementType { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public CSColors Color { get; set; }

    private RenderFragment BuildButton() => builder =>
    {
        if (HasContainerWrapper)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "btn-container");
        }

        builder.OpenElement(2, ElementType switch
        {
            CSButtonElementTypes.Button => "button",
            CSButtonElementTypes.Div => "div",
            CSButtonElementTypes.Input => "input",
            _ => throw new InvalidOperationException("This element type is not supported for CSButton")
        });

        var shapeClass = Shape switch
        {
            CSButtonShapes.Default => string.Empty,
            CSButtonShapes.Pilled => "btn--pilled",
            CSButtonShapes.Circle => "btn--circle",
            _ => throw new InvalidOperationException("This shape is not supported for CSButton")
        };
        builder.AddAttribute(3, "class", CssClass(new
        {
            Btn = true,
            BtnPrimary = (Color == CSColors.Primary),
            BtnTransparent = (Color == CSColors.Transparent),
            BtnLight = (Color == CSColors.Light),
            BtnDark = (Color == CSColors.Dark),
            BtnBlack = (Color == CSColors.Black),
            BtnInfo = (Color == CSColors.Info),
            BtnLink = (Color == CSColors.Link),
            BtnSuccess = (Color == CSColors.Success),
            BtnWarning = (Color == CSColors.Warning),
            BtnDanger = (Color == CSColors.Danger),
            Outline = IsOutline,
            BtnTiny = (Size == CSSize.XS),
            BtnSmall = (Size == CSSize.S),
            BtnLarge = (Size == CSSize.L),
            BtnXlarge = (Size == CSSize.XL)
        }, shapeClass));
        if (IsDisabled)
        {
            builder.AddAttribute(4, "disabled");
        }
        builder.AddMultipleAttributes(5, UnmatchedAttributes);

        builder.AddContent(6, ChildContent);

        builder.CloseElement();

        if (HasContainerWrapper)
        {
            builder.CloseElement();
        }
    };
}